# -*- coding: utf-8 -*-
"""model-pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fKcfGERcEKKS7L1oigOr7pj7iiXFvw9X
"""

#import libraries

import wget
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
import xgboost as xgb
import category_encoders as ce
from sklearn.metrics import accuracy_score
import pickle

link_to_data = 'http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data'
ClevelandDataSet = wget.download(link_to_data)

print(ClevelandDataSet)

col_names = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',
       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia','num']

heart_df = pd.read_csv(ClevelandDataSet, sep=',', header=None, names=col_names, na_filter= True, na_values= {'num_major_vessels': '?', 'thalassemia': '?'})

heart_df['diagnosed'] = heart_df['num'].map(lambda d: 1 if d > 0 else 0)
heart_df = heart_df.drop(columns=['num'])


X = heart_df[['age', 'sex', 'chest_pain_type', 'resting_blood_pressure',
       'cholesterol', 'fasting_blood_sugar', 'rest_ecg',
       'max_heart_rate_achieved', 'exercise_induced_angina', 'st_depression',
       'st_slope', 'num_major_vessels', 'thalassemia']]

y = heart_df['diagnosed']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y ,random_state=123)
print('Train set:', X_train.shape, y_train.shape)
print('Test set:', X_test.shape, y_test.shape)

categorical_cols=['sex', 'chest_pain_type', 'fasting_blood_sugar', 'rest_ecg','exercise_induced_angina', 'st_slope', 'num_major_vessels', 'thalassemia']


# optimized model parameters
xgb_params={'colsample_bytree': 0.6423716721494608,
 'gamma': 4.640448122287516,
 'learning_rate': 0.33851466059837393,
 'max_depth': 1,
 'min_child_weight': 3,
 'n_estimators': 802,
 'reg_alpha': 2.8379661620427266,
 'reg_lambda': 0.5797836880329088,
 'subsample': 0.7032759078465736}


# xgb model
model = xgb.XGBClassifier(**xgb_params)


# Bundle preprocessing and modeling code in a pipeline
my_pipeline = Pipeline(steps=[('onehot', ce.one_hot.OneHotEncoder(cols=categorical_cols)), ('model', model)])

# Preprocessing of training data, fit model
my_pipeline.fit(X_train, y_train)

# Preprocessing of validation data, get predictions
test_pred = my_pipeline.predict(X_test)

# Evaluate the model
print('The accuracy of prediction is:', accuracy_score(y_test, test_pred))

# Save the trained pipeline
with open('model_pipeline.pkl', 'wb') as f:
    pickle.dump(my_pipeline, f)